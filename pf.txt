def matrix(key):
    matrix=[]
    for e in key.upper():
        if e=="J":
            e=="I"
        if e not in matrix:
            matrix.append(e)
    alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    for e in alphabet:
        if e not in matrix:
            matrix.append(e)
    matrix_group=[]
    for e in range(5):
        
        matrix_group.append('')
    matrix_group[0]=matrix[0:5]
    matrix_group[1]=matrix[5:10]
    matrix_group[2]=matrix[10:15]
    matrix_group[3]=matrix[15:20]
    matrix_group[4]=matrix[20:25]
    return matrix_group
def message_to_digraphs(message_original):
    message=[]
    for e in message_original:
        message.append(e)
    for unused in range(len(message)):
        if " " in message:
            message.remove(" ")            
    i=0
    for e in range(len(message)//2):
        if message[i]==message[i+1]:
            message.insert(i+1,'X')
        i=i+2

    if len(message)%2==1:
        message.append("Z")
    i=0
    new=[]
    for x in range(0,len(message)//2):
        new.append(message[i:i+2])
        i=i+2
    return new
def find_position(key_matrix,letter):
    x=y=0
    for i in range(5):
        for j in range(5):
            if key_matrix[i][j]==letter:
                x=i
                y=j
    return x,y

def encrpyt(message,key):
    message=message_to_digraphs(message)
    key_matrix=matrix(key)
    cipher=""
    for e in message:
        p1,q1=find_position(key_matrix,e[0].upper())
        p2,q2=find_position(key_matrix,e[1].upper())
        if p1==p2:
            if q1==4:
                q1=-1
            if q2==4:
                q2=-1
            cipher+=(key_matrix[p1][q1+1])
            cipher+=(key_matrix[p1][q1+1])
        elif q1==q2:
            if p1==4:
                p1=-1
            if p2==4:
                p2=-1
            cipher+=(key_matrix[p1+1][q1])
            cipher+=(key_matrix[p2+1][q2])
        else:
            cipher+=(key_matrix[p1][q2])
            cipher+=(key_matrix[p2][q1])
    return cipher

def cipher_to_digraphs(cipher):
    i=0
    new=[]
    for x in range(len(cipher)//2):
        new.append(cipher[i:i+2])
        i=i+2
    return new

def decrypt(ciphertext,key):
    cipher=cipher_to_digraphs(ciphertext)
    print(cipher)
    key_matrix=matrix(key)
    plaintext=""
    for e in cipher:
        p1,q1=find_position(key_matrix,e[0].upper())
        p2,q2=find_position(key_matrix,e[1].upper())
        if p1==p2:
            plaintext+=(key_matrix[p1][p1-1])
            plaintext+=(key_matrix[p2][q2-1])
        elif q1==q2:
            plaintext+=(key_matrix[p1-1][q1])
            plaintext+=(key_matrix[p2-1][q2])
        else:
            plaintext+=(key_matrix[p1][q2])
            plaintext+=(key_matrix[p2][q1])
    output=""
    for e in plaintext:
        output+=e
    return output.lower()
print("Playfair Cipher")
message=""
order=int(input("choose:\n1.encryption \n2.decryption\n"))
if order==1:
    key=input("please input the key: ")
    message1=input("Please  input the message: ")
    for m in message1:
        if m=="J":
            message+="I"
        else:
            message+=m
    print("Encrypting: \n"+"Message: "+message)
    print("Break the message into diagraphs: ")
    print(message_to_digraphs(message))
    print("Matrix: ")
    for element in matrix(key):
        print(element)
    print("Cipher: ")
    print(encrpyt(message,key))
elif order==2:
    key=input("Please input the key: ")
    cipher=input("Please input the cipher text: ")
    print("\nDecrypting: \n"+"Cipher:"+cipher)
    print("Break the message into diagraphs")
    print(message_to_digraphs(cipher))
    print("Matrix:")
    for element in matrix(key):
        print(element)
    print("cipher:")
    print(decrypt(cipher,key))
else:
    print("error")
