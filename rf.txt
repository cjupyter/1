#railfencecipher
def main():
    clearText=input("Enter the plaintext message: ")
    key=int(input("Emter the size of the Rail Diagonals: "))
    print("Original The: ",clearText)
    cipherText=cipher(clearText,key)
    print("Ciphered Text: ",cipherText)
    decipherText=decipher(cipherText,key)
    print("Decipher text: " ,decipherText)

def cipher(clearText,key):
    result=""
    matrix=[["" for x in range(len(clearText))] for y in range(key)]
    increment=1
    row=0
    col=0
    for c in clearText:
        if row+increment <0 or row + increment >= len(matrix):
            increment=increment*-1
        matrix[row][col]=c
        row+=increment
        col+=1
    for list in matrix:
        result +="".join(list)
    return result

def decipher(cipherText,key):
    result=" "
    matrix=[[" "for x in range(len(cipherText))] for y in range(key)]
    idx=0
    increment=1
    for selectedRow in range(0,len(matrix)):
        row=0
        for col in range(0,len(matrix[row])):
            if row +increment<0 or row+increment>=len(matrix):
                increment=increment*-1
            if row ==selectedRow:
                matrix[row][col]+=cipherText[idx]
                idx+=1
            row+=increment
    result=reading(matrix)
    return result

def reading(matrix):
    res=""
    increment=1
    row=0
    col=0
    for c in range(len(matrix[row])):
        if row + increment<0 or row + increment >=len(matrix):
            increment=increment*-1
        res+=matrix[row][col]
        row+=increment
        col+=1
    return res


main()



#column


=================


import math

def columnar_cipher(message, key, encrypt=True):

    pad_len = len(key) - len(message) % len(key)
    padded_message = message + '_' * pad_len

    col = len(key)
    row = int(math.ceil(len(padded_message) / col))
    matrix = [padded_message[i:i+col] for i in range(0, len(padded_message), col)]
    key_order = sorted(range(col), key=lambda k: key[k])

    if encrypt:
        result = ''.join(''.join(row[i] for i in key_order) for row in matrix)
    else:
        key_order = sorted(range(col), key=lambda k: key[k])
        result = ''.join(matrix[i][key_order.index(j)] for i in range(row) for j in range(col))
    return result

# Example usage
key = "HACK"
message = "hello"

encrypted = columnar_cipher(message, key)
decrypted = columnar_cipher(encrypted, key, encrypt=False)

print(f"Original Message: {message}")
print(f"Encrypted: {encrypted}")
print(f"Decrypted: {decrypted}")

             





