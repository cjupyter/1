#caeser

lower="abcdefghijklmnopqrstuvwxyz"
upper="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
key=int(input("Enter a Key"))
plain=input("Enter a plaintext")

def encrypt():
    global cp
    cp=""
    for c in plain:
        if c.isalpha() and c.islower():
            cp+=lower[(lower.index(c)+key)%26]
        elif c.isalpha() and c.isupper():
            cp+=upper[(upper.index(c)+key )%26 ]
        else:
            cp+=c
    print("ciphertext",cp)

def decrypt():
    global p
    p=""
    for c in cp:
        if c.isalpha() and c.islower():
            p+=lower[(lower.index(c)-key)%26]
        elif c.isalpha() and c.isupper():
            p+=upper[(upper.index(c)-key)%26]
        else:
            p+=c
    print("ciphertext",p)
encrypt()
decrypt()






#monoalphabeticcipher
import random
chars='ABCDEFGHIJKLMNOPQRSTUVWXYZ'+'abcdefghijklmnopqrstuvwxyz'+'0123456789'+'~!@#$%^&*()_+{}:"?><'
def generate_key():
    shuffled=sorted(chars,key=lambda k:random.random())
    return dict(zip(chars,shuffled))

def encrypt(key,plaintext):
    return''.join(key[a] for a in plaintext)

def decrypt(key,cypertext):
    flipped={v:k for k,v in key.items()}
    return''.join(flipped[a] for a in cypertext)

def show_result(plaintext):
    key=generate_key()
    encrypted=encrypt(key,plaintext)
    decrypted=decrypt(key,encrypted)
    print('key:%s'%key)
    print('plaintext:'+plaintext)
    print('encrypted:'+encrypted)
    print('decrypted:'+decrypted)
    
plaintext=input('Enter the plaintext:')
show_result(plaintext)
